@page "/Event/{eventId}"

@using Blazored.SessionStorage
@using Prototype.Models
@using Prototype.Models.Rights
@inject NavigationManager Navigation
@inject ISessionStorageService SessionStorage



<PageTitle>@currentEvent.Name</PageTitle>

<div class="d-flex w-100">
    <div class="w-25">
        <h3>@currentEvent.Name</h3>
    </div>
    <div class="w-25 justify-content-center">
        <button @onclick="() => EventSignUp(currentEvent)">Anmelden</button>
    </div>
</div>

<div class="d-flex">
    <div class="p-2">
        <p class="fw-bold">Datum des Events: </p>
    </div>
    <div class="p-2">
        <p>@currentEvent.Date</p>
    </div>
    <div class="p-2">
        <p class="fw-bold">Uhrzeit: </p>
    </div>
    <div class="p-2">
        <p>@currentEvent.Time</p>
    </div>
    <div class="p-2">
        <p class="fw-bold">Ort der Veranstaltung: </p>
    </div>
    <div class="p-2">
        <p>@currentEvent.Location</p>
    </div>
</div>


<h4>Informationen über das Event:</h4>
<p>@currentEvent.Description</p>

@if (authority.ManageEvent)
{
    <div class="popup-overlay">
        <div class="popup-box">
            <button @onclick="EnableEventEdit">Event bearbeiten</button>
        </div>
    </div>
}

@code {
	[Parameter]
	public int eventId{ get; set;}

    private bool isLoggedIn;
    private Person currentUser;
    private Rights authority = new Member();
    private Event currentEvent;

    protected override async Task OnInitializedAsync()
    {
	    isLoggedIn = await SessionStorage.GetItemAsync<bool>("isLoggedIn");
	    if (!isLoggedIn)
	    {
		    Navigation.NavigateTo("/Login");
		    return;
	    }
	    currentUser = await SessionStorage.GetItemAsync<Person>("user");
	    authority = await SessionStorage.GetItemAsync<Rights>("rights");
	    currentEvent = Application.Instance.GetEvent(eventId);
    }



    public void EnableEventEdit()
    {
	    Navigation.NavigateTo($"/EventAdministration/{currentEvent.Name}"); // falls übergabe über eine Variable´: eher über ID
    }


    private void EventSignUp(Models.Event currentEvent)
    {
	    if (!currentEvent.EventMembers.Contains(currentUser))
	    {
		    currentUser.Events.Add(currentEvent.Id);
		    currentEvent.EventMembers.Add(currentUser);
	    }
    }
}
