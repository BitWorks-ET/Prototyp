@page "/EventAdministration/{eventId}"
@page "/EventAdministration"

@using Blazored.SessionStorage
@using Prototype.Models
@using Prototype.Models.Rights
@using Blazored.SessionStorage
@inject NavigationManager Navigation
@inject ISessionStorageService SessionStorage



<PageTitle>Eventbearbeitung</PageTitle>

<div class="d-flex w-100">
    <div class="w-25">
        <h3><InputTextArea @bind-Value="@currentEvent.Name" class="form-control" /></h3>
    </div>
    <div class="w-25 justify-content-center">
        <button disabled>Anmelden</button>
    </div>
</div>


<div class="d-flex">
    <div class="p-2">
        <p class="fw-bold">Datum des Events: </p>
    </div>
    <div class="p-2">
        <InputDate id="birthday" @bind-Value="currentEvent.Date" class="form-control" />
    </div>
    <div class="p-2">
        <p class="fw-bold">Uhrzeit: </p>
    </div>
    <div class="p-2">
        <input type="time" @bind="currentEvent.Time" class="form-control" />
    </div>
    <div class="p-2">
        <p class="fw-bold">Ort der Veranstaltung: </p>
    </div>
    <div class="p-2">
        <InputText @bind-Value="@currentEvent.Location" class="form-control" />
    </div>
</div>

<h4>Informationen über das Event:</h4>
<InputTextArea @bind-Value="currentEvent.Description" class="form-control" />

<div class="d-flex">
    <div class="p-2">
        <button @onclick="SaveEventChanges">Prozessschritt hinzufügen</button> <!--was machen wir hier noch genau alles-->
    </div>
    <div class="p-2">
        <button @onclick="SaveEventChanges">Änderungen speichern</button>
    </div>
    <div class="p-2">
        <button @onclick="DiscardEventChanges">Änderungen verwerfen</button>
    </div>
</div>
<div>
    <div>
        <h3>Eventprozesse</h3>
    </div>
    <div>
        <table class="table">
            <thead>
                <tr>
                    <th>Ausführen</th>
                    <th>Prozessname</th>
                    <th>Beschreibung</th>
                    <th>Platzhalter</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var TestProcess in processList)
                {
                    <tr>
                        <td><button @onclick="() => ExecuteProcess(TestProcess)">Ausführen</button></td>
                        <td>@TestProcess.name</td>
                        <td>@TestProcess.tasks</td>
                        <InputText @bind-Value="TestProcess.placeholder" class="form-control" />

                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div>
        <NavLink href="/processSuite" class="btn btn-primary">
            Neuen Prozess hinzufügen
        </NavLink>
    </div>
</div>

@code {
    [Parameter]
    public string? eventId{ get; set;}

    private bool isLoggedIn;
    private Person currentUser;
    private string rightsType;
    private Rights authority = new Member();
    private Event currentEvent = new Event("", new Person("", ""));

    private bool isNewEvent;


    protected override async Task OnInitializedAsync()
    {
        isLoggedIn = await SessionStorage.GetItemAsync<bool>("isLoggedIn");
        if (!isLoggedIn)
        {
            Navigation.NavigateTo("/Login");
            return;
        }
        currentUser = await SessionStorage.GetItemAsync<Person>("user");
        rightsType = await SessionStorage.GetItemAsStringAsync("rightsType");
        if (rightsType == "Member")
        {
            authority = await SessionStorage.GetItemAsync<Member>("rights"); 
        }
        else if (rightsType == "Organizer")
        {
            authority = await SessionStorage.GetItemAsync<Organizer>("rights");
        }


        if (eventId == null)
        {
            isNewEvent = true;
            currentEvent = new Event("NewEvent", currentUser);
        }
        else
        {
            isNewEvent = false;
            currentEvent = Application.Instance.GetEvent(int.Parse(eventId));
            currentEvent = currentEvent.ShallowCopy();
        }
    }


    private void SaveEventChanges()
    {
        Organization currentOrg = Application.Instance.GetOrganization(currentUser.OrganizationId);
        if (isNewEvent)
        {
            Application.Instance.AddEvent(currentEvent);
            currentOrg.Events.Add(currentEvent);
            eventId = $"{currentEvent.Id}";
        }
        else
        {
            Event oldEvent = Application.Instance.GetEvent(int.Parse(eventId));
            Application.Instance.RemoveEvent(oldEvent);
            currentOrg.Events.Remove(oldEvent);

            Application.Instance.AddEvent(currentEvent);
            currentOrg.Events.Add(currentEvent);
        }
	    Navigation.NavigateTo($"Event/{eventId}");
    }

    private void DiscardEventChanges()
    {
	    if (isNewEvent)
	    {
		    Navigation.NavigateTo($"/");
	    }
	    else
	    {
            Event oldEvent = Application.Instance.GetEvent(int.Parse(eventId));
            Navigation.NavigateTo($"Event/{eventId}");
	    }
    }


    public class TestProcess
    {
        public string? name;
        public string? tasks;
        public bool isDone;
        public string? placeholder;
    }

    private List<TestProcess> processList = new()
    {
        new TestProcess { name = "Einladungen vorbereiten", tasks = "Automatischer Versandt von E-Mail Einladungen", isDone = true},
        new TestProcess { name = "Anmeldeschluss", tasks = "Aktiviert den Anmeldeschluss zu einem Zeitpunkt (Kann früher ausgelöst werden)", isDone = false},
        new TestProcess { name = "Dankessagung", tasks = "versenden von Dankes-e-Mails", isDone = false}
    };

    public void ExecuteProcess(TestProcess process)
    {
        //ausführng des Prozesses
    }
}
