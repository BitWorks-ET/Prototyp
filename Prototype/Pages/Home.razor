@page "/"

@using BCrypt.Net
@using Blazored.SessionStorage
@using Prototype.Models
@using Prototype.Models.Rights
@inject NavigationManager Navigation
@inject ISessionStorageService SessionStorage



<PageTitle>Übersicht</PageTitle>

<h1>Willkommen, UserName!</h1>

<div class="mb-3">
    <label class="ms-3">
        <input type="checkbox" @bind="userActive"/> Bereits Angemeldet
    </label>
    <label class="ms-3">
        <input type="checkbox" @bind="eventOver" /> Event vorbei
    </label>
</div>
<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Datum</th>
            <th>Anmelden</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var orgEvent in allEvents)
        {
            <tr>
                <td><a href="@($"/Event/{orgEvent.Name}")">@orgEvent.Name</a></td>
                <td>@orgEvent.Date</td>
                <td><button @onclick="() => EventSignUp(orgEvent)">Anmelden</button></td>
            </tr>
        }
    </tbody>
</table>

@if (authority.CreateEvent) // Alle einzeln machen
{
    <div class="d-flex">
        <NavLink href="/EventAdministration" class="btn btn-primary">
            Neues Event Erstellen
        </NavLink>
        <NavLink href="/manageOrganisation" class="btn btn-primary">
            Organisation Verwalten
        </NavLink>
        <NavLink href="/processSuite" class="btn btn-primary">
            Prozesse Erstellen
        </NavLink>
    </div>
}



    private IEnumerable<Event> GetFilteredEvents()
    {
        if (!userActive && !eventOver)
            return eventList;

        return eventList.Where(e =>
            (userActive && CurrentUserIsActive(e)) ||
            (eventOver && (e.date <= DateTime.Today)));
    }

    private bool CurrentUserIsActive(TestEvent testEvent){
        
        //hier Logik die erkennt ib USer zum event angemeldet ist
        return true;
    }

    private bool isLoggedIn;
    private Person currentUser;
    private Rights authority = new Member();

    private List<Models.Event> allEvents = new List<Models.Event>();

    protected override async Task OnInitializedAsync()
    {
        userForTesting();

	    isLoggedIn = await SessionStorage.GetItemAsync<bool>("isLoggedIn");
        if (!isLoggedIn)
        {
	        Navigation.NavigateTo("/Login");
            return;
        }
        currentUser = await SessionStorage.GetItemAsync<Person>("user");
        authority = await SessionStorage.GetItemAsync<Rights>("rights");

        allEvents = Application.Instance.GetOrganization(currentUser.OrganizationId).Events;
    }


    private void EventSignUp(Models.Event currentEvent)
    {
	    if (!currentEvent.EventMembers.Contains(currentUser))
	    {
		    currentUser.Events.Add(currentEvent.Id);
		    currentEvent.EventMembers.Add(currentUser);
	    }
    }


    private void userForTesting()
    {
        Person testUser = new Person("lol@lol", BCrypt.HashPassword("lol"));
	    Application.Instance.AddMember(testUser);

	    Organization newOrg = new Organization("Test", testUser);
	    newOrg.Domain = "lol";
	    Application.Instance.AddOrganization(newOrg);

	    testUser.OrganizationId = newOrg.Id;
    }
}
